

各デザインパターン
(from オブジェクト指向のこころ)

- Facade
問題:
	複雑なシステムの一部だけを使用する必要がある。
	あるいは、特定の方法でシステムとやり取りを行う必要がある。
目的: 
	既存システムの使用法を簡素化したい。
解決策: 
	既存システムを使用するクライアント向けの新たなインタフェースを作成する。

- Adapter
問題:
	使用したいデータや振る舞いが既存システム内に存在しているものの、
	そのインタフェースが正しくない。
目的: 
	修正することのできない既存オブジェクトを、
	特定のインタフェースに適合させる。
解決策: 
	必要なインタフェースを保持したラッパを提供する。

- Strategy
問題:
	要求を行うクライアントや操作対象データによって
	適用するアルゴリズムを選択する必要がある。
目的: 
	様々な業務上の規則(ビジネスルール)やアルゴリズムを、
	それが発生するコンテキストに応じて使い分けられるようにする。
解決策: 
	該当アルゴリズムの実装からアルゴリズムを個別に切り出す。
	これによりコンテキストによる選択が可能となる。

- Bridge
問題:
	クラス数の爆発を招くことなく、抽象クラスの派生物から
	複数の実装を使用する必要がある。
目的: 
	実装を使用しているオブジェクト群から、その一連の実装を切り離す。
解決策: 
	使用するすべての実装のインタフェースを定義し、
	抽象クラスの派生物からそれらを使用する。

- Abstract Factory
問題:
	関連のあるオブジェクトのファミリを実体化する必要がある。
目的: 
	特定のクライアント(または状況)に対するオブジェクトの
	ファミリやセットを用意する。
解決策: 
	オブジェクトのファミリを生成する。
	クライアントオブジェクトが使用するオブジェクト群の
	実体化方法に関する規則を、その使用から切り離す。

- Decorator
問題:
	
目的: 
	
解決策: 
	

- Observer
問題:
	
目的: 
	
解決策: 
	

- Template Method
問題:
	
目的: 
	
解決策: 
	

- Singleton
問題:
	
目的: 
	
解決策: 
	

- Factory Method
問題:
	
目的: 
	
解決策: 
	


オブジェクト指向の概念
(気になるもの)

- 流動要素のカプセル化
- 共通性/可変性
- 設計原則
-- 開放/閉鎖
-- 依存性逆転

